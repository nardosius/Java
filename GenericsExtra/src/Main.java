import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {

        int studentCount = 10;//setting up total # of students to generate
        List<Student> students = new ArrayList<>();//initialize data structure to hold student objects
        for (int i = 0; i < studentCount; i++) {
            students.add(new Student());//LOOK @ constructor. All data necessary to complete student object
//            will be generated by funx inside constructor
            /*public Student() {
        int lastNameIndex = random.nextInt(65, 91);--number in upper bound not included in range
        name = firstNames[random.nextInt(5)] + " " + (char) lastNameIndex; --names pulled from initial name array
        course = courses[random.nextInt(3)];--courses puled from initial courses array
        yearStarted = random.nextInt(2018, 2023);--yearStarted generated by upper and lower bound specified
    }*/
        }
        printMoreLists(students);

        List<LPAStudent> lpaStudents = new ArrayList<>();//initialize data structure to hold student objects
        for (int i = 0; i < studentCount; i++) {
            lpaStudents.add(new LPAStudent());
        }
        printMoreLists(lpaStudents);//this is a reference type to a parameter and even though LPAStudent inherits from Student
//        the printList(List<Student> student) method cannot accept lpaStudent. Method must be generic
        testList(new ArrayList<String>(List.of("Abel", "Barry", "Charlie")));
        testList(new ArrayList<Integer>(List.of(1, 2, 3)));

        var queryList = new QueryList<>(lpaStudents);
        var matches = queryList.getMatches("Course", "Python");
        printMoreLists(matches);
//        now run static overloaded getMatches()
        var students2021 = QueryList.getMatches(students, "YearStarted", "2021");
            printMoreLists(students2021);
    }

    public static void printMoreLists(List<? extends Student> students) {//"?" = wildcard in type parameter
        for (var student : students) {
            System.out.println(student.getYearStarted() + ": " + student);
        }
        System.out.println();
    }

    public static void testList(List<?> list) {//proper method for overloading a method of type "?"
        for (var element : list) {
            if (element instanceof String s) {
                System.out.println("String: " + s.toUpperCase());
            } else if (element instanceof Integer i) {
                System.out.println("Integer: " + i.floatValue());
            }
        }
    }

    /*public static <T extends Student> void printList(List<T> students) {//can make method generic to overcome type reference error
        for (var student : students) {
            System.out.println(student.getYearStarted() + ": " + student);
        }
        System.out.println();
    }*/


}